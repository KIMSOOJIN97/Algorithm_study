/////////////////////////////////////////////////////////////
// title : 백준 5373 - 큐빙
// date : 2020.02.17
// writer : jeong
// result : 
// problem : https://www.acmicpc.net/problem/5373
// reference : 
/////////////////////////////////////////////////////////////
//                   //////////////
//                   // O0 O1 O2 //
//                   //          //
//                   //          //
//       //////////////////////////////////////////////////
//       // G0 G1 G2 // W0 W1 W2 // B0 B1 B2 // Y0 Y1 Y2 //
//       //          //          //          //          //
//       //          //          //          //          //
//       //////////////////////////////////////////////////
//                   // R0 R1 R2 //
//                   //          //
//                   //          //
//                   //////////////

#include <iostream>
#include <cstring>
#include <string>

using namespace std;
int testcase, n;
char W[3][3], Y[3][3], R[3][3], O[3][3], B[3][3], G[3][3];
char u[3], d[3], l[3], r[3];
char first[3], second[3], third[3];
char temp[3];
string order;
char face, dir;

void SETARRAY() {
	memset(W, 'w', sizeof(W));
	memset(Y, 'y', sizeof(W));
	memset(R, 'r', sizeof(W));
	memset(O, 'o', sizeof(W));
	memset(B, 'b', sizeof(W));
	memset(G, 'g', sizeof(W));
}

void PRINT_WHITE() {
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			cout << W[i][j];
		}
		cout << '\n';
	}
}

void ROTATE(char* A, char dir) {
	if (dir == '-') {
		temp[0] = u[0], temp[1] = u[1], temp[2] = u[2];
		u[0] = r[0], u[1] = r[1], u[2] = r[2];
		r[0] = d[0], r[1] = d[1], r[2] = d[2];
		d[0] = l[0], d[1] = l[1], d[2] = l[2];
		l[0] = temp[0], l[1] = temp[1], l[2] = temp[2];

		temp[0] = *A;
		*A = *(A + 2);
		*(A + 2) = *(A + 8);
		*(A + 8) = *(A + 6);
		*(A + 6) = temp[0];

		temp[0] = *(A + 1);
		*(A + 1) = *(A + 5);
		*(A + 5) = *(A + 7);
		*(A + 7) = *(A + 3);
		*(A + 3) = temp[0];
	}
	else if (dir == '+') {
		temp[0] = u[0], temp[1] = u[1], temp[2] = u[2];
		u[0] = l[0], u[1] = l[1], u[2] = l[2];
		l[0] = d[0], l[1] = d[1], l[2] = d[2];
		d[0] = r[0], d[1] = r[1], d[2] = r[2];
		r[0] = temp[0], r[1] = temp[1], r[2] = temp[2];

		temp[0] = *A;
		*A = *(A + 6);
		*(A + 6) = *(A + 8);
		*(A + 8) = *(A + 2);
		*(A + 2) = temp[0];

		temp[0] = *(A + 1);
		*(A + 1) = *(A + 3);
		*(A + 3) = *(A + 7);
		*(A + 7) = *(A + 5);
		*(A + 5) = temp[0];
	}
}

void SOLVE(char face, char dir) {
	switch (face) {
	case 'F':
		u[0] = W[2][0], u[1] = W[2][1], u[2] = W[2][2];
		r[0] = B[2][0], r[1] = B[2][1], r[2] = B[2][2];
		d[0] = Y[2][0], d[1] = Y[2][1], d[2] = Y[2][2];
		l[0] = G[2][0], l[1] = G[2][1], l[2] = G[2][2];
		ROTATE(R[0],dir);
		W[2][0] = u[0], W[2][1] = u[1], W[2][2] = u[2];
		B[2][0] = r[0], B[2][1] = r[1], B[2][2] = r[2];
		Y[2][0] = d[0], Y[2][1] = d[1], Y[2][2] = d[2];
		G[2][0] = l[0], G[2][1] = l[1], G[2][2] = l[2];
		break;
	case 'B'://back
		u[0] = W[0][2], u[1] = W[0][1], u[2] = W[0][0];
		r[0] = G[0][2], r[1] = G[0][1], r[2] = G[0][0];
		d[0] = Y[0][2], d[1] = Y[0][1], d[2] = Y[0][0];
		l[0] = B[0][2], l[1] = B[0][1], l[2] = B[0][0];
		ROTATE(O[0], dir);
		W[0][2] = u[0], W[0][1] = u[1], W[0][0] = u[2];
		G[0][2] = r[0], G[0][1] = r[1], G[0][0] = r[2];
		Y[0][2] = d[0], Y[0][1] = d[1], Y[0][0] = d[2];
		B[0][2] = l[0], B[0][1] = l[1], B[0][0] = l[2];
		break;
	case 'U':
		u[0] = O[2][0], u[1] = O[2][1], u[2] = O[2][2];
		r[0] = B[0][0], r[1] = B[1][0], r[2] = B[2][0];
		d[0] = R[0][2], d[1] = R[0][1], d[2] = R[0][0];
		l[0] = G[2][2], l[1] = G[1][2], l[2] = G[0][2];
		ROTATE(W[0], dir);
		O[2][0] = u[0], O[2][1] = u[1], O[2][2] = u[2];
		B[0][0] = r[0], B[1][0] = r[1], B[2][0] = r[2];
		R[0][2] = d[0], R[0][1] = d[1], R[0][0] = d[2];
		G[2][2] = l[0], G[1][2] = l[1], G[0][2] = l[2];
		break;
	case 'D':
		u[0] = O[0][2], u[1] = O[0][1], u[2] = O[0][0];
		r[0] = G[0][0], r[1] = G[1][0], r[2] = G[2][0];
		d[0] = R[2][0], d[1] = R[2][1], d[2] = R[2][2];
		l[0] = B[2][2], l[1] = B[1][2], l[2] = B[0][2];
		ROTATE(Y[0], dir);
		O[0][2] = u[0], O[0][1] = u[1], O[0][0] = u[2];
		G[0][0] = r[0], G[1][0] = r[1], G[2][0] = r[2];
		R[2][0] = d[0], R[2][1] = d[1], R[2][2] = d[2];
		B[2][2] = l[0], B[1][2] = l[1], B[0][2] = l[2];
		break;
	case 'L':
		u[0] = W[0][0], u[1] = W[1][0], u[2] = W[2][0];
		r[0] = R[0][0], r[1] = R[1][0], r[2] = R[2][0];
		d[0] = Y[2][2], d[1] = Y[1][2], d[2] = Y[0][2];
		l[0] = O[0][0], l[1] = O[1][0], l[2] = O[2][0];
		ROTATE(G[0], dir);
		W[0][0] = u[0], W[1][0] = u[1], W[2][0] = u[2];
		R[0][0] = r[0], R[1][0] = r[1], R[2][0] = r[2];
		Y[2][2] = d[0], Y[1][2] = d[1], Y[0][2] = d[2];
		O[0][0] = l[0], O[1][0] = l[1], O[2][0] = l[2];
		break;
	case 'R':
		u[0] = W[2][2], u[1] = W[1][2], u[2] = W[0][2];
		r[0] = O[2][2], r[1] = O[1][2], r[2] = O[0][2];
		d[0] = Y[0][0], d[1] = Y[1][0], d[2] = Y[2][0];
		l[0] = R[2][2], l[1] = R[1][2], l[2] = R[0][2];
		ROTATE(B[0], dir);
		W[2][2] = u[0], W[1][2] = u[1], W[0][2] = u[2];
		O[2][2] = r[0], O[1][2] = r[1], O[0][2] = r[2];
		Y[0][0] = d[0], Y[1][0] = d[1], Y[2][0] = d[2];
		R[2][2] = l[0], R[1][2] = l[1], R[0][2] = l[2];
		break;
	}

}


int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	
	
	// 데이터 받기
	cin >> testcase; // 테스트 케이스 갯수

	while (testcase--) {
		// 색깔 배열 초기화
		SETARRAY();

		cin >> n;

		for (int i = 0; i < n; i++) {
			string order;
			cin >> order;
			SOLVE(order[0], order[1]);
		}
		PRINT_WHITE();
	}

	return 0;
}
