#include <iostream>

using namespace std;

int N;
int arr[3];

int MAX(int num1, int num2)
{
	if (num1 > num2)	return num1;
	else				return num2;
}

int MIN(int num1, int num2)
{
	if (num1 < num2)	return num1;
	else				return num2;
}

int main(void)
{
	cin >> N;

	int** MAX_DP = new int * [N];
	int** MIN_DP = new int * [N];

	for (int i = 0; i < N; i++) {
		MAX_DP[i] = new int[3];
		MIN_DP[i] = new int[3];

		cin >> arr[0] >> arr[1] >> arr[2];
	
		if (i == 0) {
			MAX_DP[0][0] = arr[0];
			MAX_DP[0][1] = arr[1];
				MAX_DP[0][2] = arr[2];

				MIN_DP[0][0] = arr[0];
				MIN_DP[0][1] = arr[1];
				MIN_DP[0][2] = arr[2];
			}
			else {

				MAX_DP[i][0] = MAX(MAX_DP[i - 1][0], MAX_DP[i - 1][1]) + arr[0];
				MAX_DP[i][1] = MAX(MAX(MAX_DP[i - 1][1], MAX_DP[i - 1][1]), MAX_DP[i - 1][2]) + arr[1];
				MAX_DP[i][2] = MAX(MAX_DP[i - 1][1], MAX_DP[i - 1][2]) + arr[2];

				MIN_DP[i][0] = MIN(MIN_DP[i - 1][0], MIN_DP[i - 1][1]) + arr[0];
				MIN_DP[i][1] = MIN(MIN(MIN_DP[i - 1][0], MIN_DP[i - 1][1]), MIN_DP[i - 1][0]) + arr[1];
				MIN_DP[i][2] = MIN(MIN_DP[i - 1][1], MIN_DP[i - 1][2]) + arr[2];
			}
	}

	cout << MAX(MAX(MAX_DP[N-1][0], MAX_DP[N- 1][1]), MAX_DP[N - 1][2]) << " ";
	cout << MIN(MIN(MIN_DP[N - 1][0], MIN_DP[N - 1][1]), MIN_DP[N - 1][2]) << "\n";

	return 0;
}
