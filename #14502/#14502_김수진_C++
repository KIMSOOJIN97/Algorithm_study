#include <iostream>
#include <stdio.h>
#include <queue>

using namespace std;

const int MAX =8;

int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};

int arr[MAX][MAX];
int temp_arr[MAX][MAX];
int N,M;
int max_cnt;


void BFS()
{
    int virus_arr[MAX][MAX];
    
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<M;j++)
            virus_arr[i][j]=temp_arr[i][j];
    }

    queue <pair<int , int >> q;
    
    for(int i =0 ; i<N;i++){
        for(int j=0;j<M;j++){
            if(temp_arr[i][j]==2){
                q.push(make_pair(i,j));
            }
            
            while(!q.empty()){ //empty return 1 if queue is empty.
                
                int x = q.front().first;
                int y = q.front().second;
                
                q.pop();
                
                for(int i=0;i<4;i++){
                    
                    int nx = x + dx[i];
                    int ny = y + dy[i];
                    
                    if(0<=nx && nx <N && 0<=ny && ny<M ){ // visitt_node check까지 해줌
                        if(virus_arr[nx][ny]==0){
                            q.push(make_pair(nx,ny));
                            virus_arr[nx][ny]=2;
                            
                        }
                    }
                }
                
            }
        }
    }
 
    int cnt =0;
    for(int i =0;i<N;i++){
        for(int j =0 ; j< M; j++){
            if(virus_arr[i][j] == 0)
                cnt++;
        }
    }
    
    if(cnt > max_cnt)
        max_cnt = cnt;
    
}

void wall(int cnt)
{
    if(cnt == 3)
    {
        BFS();
        return;
    }
    
    for(int i=0;i<N;i++){
        for(int j=0;j<M;j++){
            
            if(temp_arr[i][j]==0){
                temp_arr[i][j]=1;
                wall(cnt+1);
                temp_arr[i][j]=0;
            }
        }
    }
}

int main ()
{
    max_cnt =0;
    cin >> N >> M ;
    
    for(int i=0;i<N;i++){
        for(int j=0;j<M;j++){
            scanf("%d",&arr[i][j]);
            temp_arr[i][j]=arr[i][j];
        }
    }
    
    for(int i=0;i<N ; i++)
    {
        for(int j=0;j<M;j++)
        {
            if(temp_arr[i][j]==0)
            {
                temp_arr[i][j]=1;
                wall(1);
                temp_arr[i][j]=0;
            }
        }
    }
    
    cout << max_cnt<<"\n";
}
