#include <cstdio>
#include <iostream>
// BFS문제 
// **********확산문제는 BFS로 풀기**********

using namespace std;
int N, M; //연구실의 세로, 가로크기
int map_o[8][8]; //연구실 최대 크기

int dx[4] = { -1,0,1,0 };
int dy[4] = { 0,-1,0,1 };
int vir_x[64];
int vir_y[64];
int vir_count;
int emp_x[64];
int emp_y[64];
int emp_count;

void map_copy(int map_[8][8]) {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++)
			map_[i][j] = map_o[i][j];
	}
}
int virus_BFS(int map_c[8][8]) {
	//바이러스 확산 함수
	int vir_temp_count = vir_count; //다음 벽을 세울 때 다시 카운터하기 위함

	for (int i = 0; i < vir_temp_count; i++) {
		for (int j = 0; j < 4; j++) { //동서남북으로 이동
			int temp_x = vir_x[i] + dx[j];
			int temp_y = vir_y[i] + dy[j];
			if ((temp_x >= 0 && temp_x <= M - 1) && (temp_y >= 0 && temp_y <= N - 1)) { //런타임에러 방지를 위해서! -> map[8][8]인데 map[-1][-1] 접근시 백준에서 에러남
				if ((temp_x >= 0 && temp_x <= M - 1 &&map_c[temp_y][temp_x] == 0) || (temp_y >= 0 && temp_y <= N - 1 && map_c[temp_y][temp_x] == 0)) { //빈 공간, 연구소 크기에 벗어나지 않아야한다.
					vir_x[vir_temp_count] = temp_x;
					vir_y[vir_temp_count] = temp_y;
					map_c[temp_y][temp_x] = 2;
					vir_temp_count++; //증가
				}
			}
		}
	}
	return vir_temp_count;

}
int main() {
	int map_c[8][8];//copy해야지 벽을 새로 세울 때마다 초기화가능
	int virus_min = 64;
	int wallcount = 0;
	vir_count = 0;
	int virus_value = 0;
	emp_count = 0;
	scanf("%d", &N);
	scanf("%d", &M);
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			scanf("%d", &map_o[i][j]); //map의 정보 받아오기

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (map_o[i][j] == 2) { //바이러스
				vir_x[vir_count] = j; //바이러스가 있는 위치 x값 저장
				vir_y[vir_count] = i; //바이러스가 있는 위치 y값 저장
				vir_count++;
				continue;
			}
			else if (map_o[i][j] == 0) {
				emp_x[emp_count] = j; //빈공간
				emp_y[emp_count] = i;
				emp_count++;
				continue;
			}
			else //벽
				wallcount++;
		}
	}
	for (int i = 0; i < emp_count - 2; i++) {
		for (int j = i + 1; j < emp_count - 1; j++) {
			for (int k = j + 1; k < emp_count; k++) { //삼중 for문을 통해 순열 
				map_copy(map_c); //map_c를 원래 map으로 copy
				map_c[emp_y[i]][emp_x[i]] = 1; //고정
				map_c[emp_y[j]][emp_x[j]] = 1; //두번째 고정
				map_c[emp_y[k]][emp_x[k]] = 1; //계속 움직임.
				virus_value = virus_BFS(map_c);
				virus_min = virus_min < virus_value ? virus_min : virus_value; //virus_min이 더 작은가? 참이면 virus min유지 더 크면 virus_value로 바꿈. 
			}
		}
	}
	printf("%d\n", N * M - virus_min - wallcount - 3); //바이러스 
}
