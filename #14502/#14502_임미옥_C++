#include <stdio.h>
//확산이면 BFS!!!

int n; //세로크기
int m; //가로크기
int map_o[8][8];//최대 8이기때문에

int v_n; //바이러스 갯수
int v_x[64]; //
int v_y[64]; 

int a_n; //빈 공간 갯수
int a_x[64];
int a_y[64];

int w_n;

int flow_bfs(int map[8][8])
{
	int v_n_b = v_n; //바이러스 갯수

	for (int i = 0; i < v_n_b; i++)
	{
		if (v_x[i] < m - 1 && map[v_y[i]][v_x[i] + 1] == 0) //오른쪽
		{
			map[v_y[i]][v_x[i] + 1] = 2;
			v_x[v_n_b] = v_x[i] + 1;
			v_y[v_n_b] = v_y[i];
			v_n_b++;
		}
		if (v_x[i] > 0 && map[v_y[i]][v_x[i] - 1] == 0) //왼쪽
		{
			map[v_y[i]][v_x[i] - 1] = 2;
			v_x[v_n_b] = v_x[i] - 1;
			v_y[v_n_b] = v_y[i];
			v_n_b++;
		}
		if (v_y[i] < n - 1 && map[v_y[i] + 1][v_x[i]] == 0) //아래
		{
			map[v_y[i] + 1][v_x[i]] = 2;
			v_x[v_n_b] = v_x[i];
			v_y[v_n_b] = v_y[i] + 1;
			v_n_b++;
		}
		if (v_y[i] > 0 && map[v_y[i] - 1][v_x[i]] == 0) //위
		{
			map[v_y[i] - 1][v_x[i]] = 2;
			v_x[v_n_b] = v_x[i];
			v_y[v_n_b] = v_y[i] - 1;
			v_n_b++;
		}
	}

	return v_n_b;
}

void copy_map(int map[8][8])
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			map[i][j] = map_o[i][j];
		}
	}
}

int main()
{
	int map_l[8][8];
	int tmp = 0;

	int min_v = 64;

	scanf("%d", &n);
	scanf("%d", &m);

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			scanf("%d", &map_o[i][j]); 
		}
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (map_o[i][j] == 2)
			{
				v_x[v_n] = j; //바이러스 위치 저장
				v_y[v_n] = i;
				v_n++;
			}
			else if (map_o[i][j] == 0)
			{
				a_x[a_n] = j; //빈 공간 위치 
				a_y[a_n] = i;
				a_n++;
			}
			else
			{
				w_n++; //벽 갯수
			}
		}
	}

	for (int i = 0; i < a_n - 2; i++)
	{
		for (int j = i + 1; j < a_n - 1; j++)
		{
			for (int k = j + 1; k < a_n; k++)
			{
				copy_map(map_l);
				map_l[a_y[i]][a_x[i]] = 1;
				map_l[a_y[j]][a_x[j]] = 1;
				map_l[a_y[k]][a_x[k]] = 1;
				tmp = flow_bfs(map_l);
				min_v = min_v < tmp ? min_v : tmp;
			}
		}
	}

	printf("%d\n", n * m - min_v - w_n - 3); //바이러스 

	return 0;
}
