#include <stdio.h>
#include <iostream>
#include <queue>

using namespace std;

struct Virus {
	int x;
	int y;
};

Virus virus[20];

int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };


int MIN = 999999;
int cnt = 0;// number of virus 
int N, M; // N : size of lab, M : number of active virus 
int map[50][50];
int tmp[50][50] = { -3, };
int tmp1[50][50];
int active[10];
int visited[10];
//0 : void , 1 : wall, 2 : virus 

void time()
{
	int tm=0; // total time 

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {

			if (tmp[i][j] == -3)	return;
			if (tm < tmp[i][j])	tm = tmp[i][j];
		}
	}


	if (MIN > tm) {
		MIN = tm;
	}
}

void copy(int arr1[50][50], int arr2[50][50])
{
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++)
			arr1[i][j] = arr2[i][j];
	}
}

void BFS(void)
{
	queue <pair<int,int>> q;

	for (int i = 0; i < M; i++)
	{
		int idx = active[i];
		q.push(make_pair(virus[idx].x,virus[idx].y)); //Insert virus coordinate
		tmp[virus[idx].x][virus[idx].y] = 0;

		while (!q.empty()) {
			int x = q.front().first;
			int y = q.front().second;

			q.pop();

			for (int j = 0; j < 4; j++)
			{
				int nx = x + dx[j];
				int ny = y + dy[j];

				if (tmp[nx][ny] == -2 || tmp[nx][ny] == -1){
					continue;
				}

				if (0 <= nx && 0 <= ny && nx < N && ny < N) {
					if(tmp[nx][ny] > 0 && tmp[nx][ny] > tmp[x][y] + 1){
						tmp[nx][ny] = tmp[x][y] + 1;
						q.push(make_pair(nx, ny));
					}
					if( tmp[nx][ny]==-3){ 
						tmp[nx][ny] = tmp[x][y] + 1;
						q.push(make_pair(nx, ny));
					}					
				}
			}
		}
	}

}

void DFS(int idx)
{
	if (idx == M) {
		copy(tmp,tmp1);
		BFS();
		time();
		return;
	}

	for (int i = 0; i < cnt; i++) {
		if (visited[i] == 0) {

			visited[i] = 1;
			active[idx] = i;
			DFS(idx + 1);
			visited[i] = 0;
		}
	}
}

int main(void)
{
	cin >> N >> M;

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			tmp[i][j] = -3;
		}
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];
			if (map[i][j] == 2) {
				tmp[i][j] = -2;
				virus[cnt].x = i;
				virus[cnt].y = j;
				cnt++;
			}
			if (map[i][j] == 1) {
				tmp[i][j] = -1;
			}
		}
	}
	for (int i = 0; i < cnt; i++)
		visited[i] = 0;

	copy(tmp1, tmp);
	DFS(0);

	if (MIN == 999999)
		MIN = -1;
	cout << MIN << "\n";

	return 0;

}
